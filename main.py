#Напишите программу,которой на вход подается последовательность чисел через пробел,а также запрашивается у пользователя
#любое число.
#В качестве задания повышенного уровня сложности можете выполнить проверку соответствия указанному в условии
#ввода данных.
#Далее программа работает по следующему алгоритму:Преобразование введённой последовательности в список
#Сортировка списка по возрастанию элементов в нем (для реализации сортировки определите функцию)
#Устанавливается номер позиции элемента, который меньше введенного пользователем числа, а следующий за ним больше
#или равен этому числу.При установке позиции элемента воспользуйтесь алгоритмом двоичного поиска,
#который был рассмотрен в этом модуле. Реализуйте его также отдельной функцией.

array = list(map(int, input("Введите последовательность чисел через пробел").split()))#на вход подается последовательность чисел через пробел.
element = int(input("Введите число:"))#а также запрашивается у пользователя любое число

while element:
    if element < min(array):
        print("Число отсутствует в заданной последовательности")
        element = int(input("Введите число:"))
    elif element > max(array):
        print("Число отсутствует в заданной последовательности")
        element = int(input("Введите число:"))
    else:
        break
#Сортировка списка по возрастанию элементов в нем
for i in range(len(array)):  # проходим по всему массиву
    idx_min = i  # сохраняем индекс предположительно минимального элемента
    for j in range(i, len(array)):
        if array[j] < array[idx_min]:
            idx_min = j
    if i != idx_min:  # если индекс не совпадает с минимальным, меняем
        array[i], array[idx_min] = array[idx_min], array[i]

def binary_search(array, element, left, right): #Устанавливается номер позиции элемента
    if left > right:  # если левая граница превысила правую,
        return -1  # останавливаем рекурсию
    middle = (right + left) // 2  # находимо середину
    if array[middle] == element:  # если элемент в середине,
        return middle  # возвращаем этот индекс
    elif element < array[middle]:  # если элемент меньше элемента в середине
        # рекурсивно ищем в левой половине
        return binary_search(array, element, left, middle - 1)
    else:  # иначе в правой
        return binary_search(array, element, middle + 1, right)

print(binary_search(array, element, 0, len(array)-1))
print(array)